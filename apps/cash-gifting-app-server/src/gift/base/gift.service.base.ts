/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Gift as PrismaGift } from "@prisma/client";

export class GiftServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GiftCountArgs, "select">): Promise<number> {
    return this.prisma.gift.count(args);
  }

  async gifts<T extends Prisma.GiftFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GiftFindManyArgs>
  ): Promise<PrismaGift[]> {
    return this.prisma.gift.findMany<Prisma.GiftFindManyArgs>(args);
  }
  async gift<T extends Prisma.GiftFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GiftFindUniqueArgs>
  ): Promise<PrismaGift | null> {
    return this.prisma.gift.findUnique(args);
  }
  async createGift<T extends Prisma.GiftCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GiftCreateArgs>
  ): Promise<PrismaGift> {
    return this.prisma.gift.create<T>(args);
  }
  async updateGift<T extends Prisma.GiftUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GiftUpdateArgs>
  ): Promise<PrismaGift> {
    return this.prisma.gift.update<T>(args);
  }
  async deleteGift<T extends Prisma.GiftDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GiftDeleteArgs>
  ): Promise<PrismaGift> {
    return this.prisma.gift.delete(args);
  }
}
