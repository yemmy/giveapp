/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Wallet as PrismaWallet,
  User as PrismaUser,
} from "@prisma/client";

export class WalletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WalletCountArgs, "select">): Promise<number> {
    return this.prisma.wallet.count(args);
  }

  async wallets<T extends Prisma.WalletFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WalletFindManyArgs>
  ): Promise<PrismaWallet[]> {
    return this.prisma.wallet.findMany<Prisma.WalletFindManyArgs>(args);
  }
  async wallet<T extends Prisma.WalletFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WalletFindUniqueArgs>
  ): Promise<PrismaWallet | null> {
    return this.prisma.wallet.findUnique(args);
  }
  async createWallet<T extends Prisma.WalletCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WalletCreateArgs>
  ): Promise<PrismaWallet> {
    return this.prisma.wallet.create<T>(args);
  }
  async updateWallet<T extends Prisma.WalletUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WalletUpdateArgs>
  ): Promise<PrismaWallet> {
    return this.prisma.wallet.update<T>(args);
  }
  async deleteWallet<T extends Prisma.WalletDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WalletDeleteArgs>
  ): Promise<PrismaWallet> {
    return this.prisma.wallet.delete(args);
  }

  async getUser(parentId: bigint): Promise<PrismaUser | null> {
    return this.prisma.wallet
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
